---
/**
 * tags and categories home page
 */
import { getPostSlug } from '@/content/config';
import { getGroupedInfo, type ITagType } from '@/common/tag-home';
import BaseLayout from '@/layouts/base.astro';
import { TagButton } from '@/components/component-fragment';
import { getCategoryListLink, getTagListLink } from '@/common/utils';
// import { SITE_NAME } from '@/config';

interface Props {
  type: ITagType;
}

const { type } = Astro.props;

const { names, group } = await getGroupedInfo({ type });
const uniqueNames = Array.from(names);
const getLink = type === 'categories' ? getCategoryListLink : getTagListLink;

const typeName: Record<ITagType, string> = {
  tags: '标签',
  categories: '分类'
};

const siteTitle = `全部${typeName[type]}`;

const transitionNames = new Set<string>();
// to avoid duplicate transition name which will cause transition invalid
function getTransitionName(id: string) {
  if (transitionNames.has(id)) return undefined;
  transitionNames.add(id);
  return id;
}
---

<BaseLayout title={siteTitle}>
  <main class="max-w-4xl px-4 mx-auto">
    <input
      autofocus
      class="block py-4 text-2xl w-full outline-none bg-transparent"
      placeholder=`搜索${typeName[type]} 和 文章标题`
      id="search"
    />
    <ul class="flex flex-wrap gap-4 mb-8">
      {
        uniqueNames.map((name) => (
          <li class="js-tag">
            <TagButton type="hash" name={name} />
          </li>
        ))
      }
    </ul>
    <ul>
      {
        Object.keys(group).map((name) => (
          <li>
            <h2
              id={encodeURI(name)}
              class="js-group-title text-xl font-medium text-slate-600 dark:text-slate-300 mb-2"
            >
              <a
                href={getLink(name)}
                data-after={`(${group[name].length})`}
                class="tag-group-title"
              >
                {name}
              </a>
            </h2>
            <ul class="list-inside list-disc pl-4 text-slate-500 dark:text-slate-400 space-y-2 mb-4 bottom-1">
              {group[name].map((post) => (
                <li
                  class="js-post-item"
                  transition:name={getTransitionName(post.id)}
                >
                  <a href={getPostSlug(post.data, true)}>{post.data.title}</a>
                </li>
              ))}
            </ul>
          </li>
        ))
      }
    </ul>
    <div
      class="text-slate-600 dark:text-slate-400 font-medium hidden"
      id="empty-tip"
    >
      没有找到相关{typeName[type]}
    </div>
  </main>
</BaseLayout>

<style is:global>
  .tag-group-title:after {
    content: attr(data-after);
    opacity: 0.6;
    margin-left: 0.2em;
  }
</style>

<script>
  const searchInput = document.getElementById('search')!;
  let isIMETyping = false;
  searchInput.addEventListener('compositionstart', () => {
    isIMETyping = true;
  });
  searchInput.addEventListener('compositionend', () => {
    isIMETyping = false;
  });
  searchInput.addEventListener('keyup', (e) => {
    // prevent search when IME typing
    if (isIMETyping) return;
    const value = (e.target as HTMLInputElement).value
      .trim()
      .toLocaleLowerCase();
    const showAll = value === '';

    let hasSomeItem = false;

    const tags = document.querySelectorAll(
      '.js-tag'
    ) as NodeListOf<HTMLLIElement>;
    // search tags
    tags.forEach((tag) => {
      const shouldShow =
        showAll || tag.textContent!.toLocaleLowerCase().includes(value);
      hasSomeItem = hasSomeItem || shouldShow;
      tag.classList.toggle('hidden', !shouldShow);
    });
    // posts grouped by tag
    const tagGroupTitles = document.querySelectorAll(
      '.js-group-title'
    ) as NodeListOf<HTMLHeadingElement>;

    tagGroupTitles.forEach((tagGroupTitle) => {
      let groupShouldShow =
        showAll ||
        tagGroupTitle.textContent!.toLocaleLowerCase().includes(value);
      const items =
        tagGroupTitle.nextElementSibling!.querySelectorAll('.js-post-item');
      const odlGroupShouldShow = groupShouldShow;
      items.forEach((item) => {
        if (odlGroupShouldShow) {
          item.classList.remove('hidden');
          return;
        }
        const itemShouldShow = item
          .textContent!.toLocaleLowerCase()
          .includes(value);
        groupShouldShow = groupShouldShow || itemShouldShow;
        item.classList.toggle('hidden', !itemShouldShow);
      });

      tagGroupTitle.parentElement!.classList.toggle('hidden', !groupShouldShow);
    });

    document
      .getElementById('empty-tip')!
      .classList.toggle('hidden', hasSomeItem);
  });
</script>
